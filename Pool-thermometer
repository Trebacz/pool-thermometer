// This #include statement was automatically added by the Particle IDE.
#include <MQTT.h>

// This #include statement was automatically added by the Particle IDE.
#include <PowerShield.h>

//**************************************************************************************
// Author: Gustavo Gonnet
// Contact: gusgonnet@gmail.com
// Project: https://www.hackster.io/gusgonnet/pool-temperature-monitor-5331f2
// License: Apache-2.0
//**************************************************************************************

// IO mapping
// A0 : pool_THERMISTOR

int _version = 1.3;

#include <math.h>
#include "application.h"
// Include the Powershield library
#include "PowerShield/PowerShield.h"
PowerShield batteryMonitor;

// this is the thermistor used - https://www.adafruit.com/products/372

#define THERMISTORNOMINAL 10000 // resistance at 25 degrees C
#define TEMPERATURENOMINAL 25 // temp. for nominal resistance (almost always 25 C)
#define NUMSAMPLES 10 // how many samples to take and average, more takes longer but measurement is 'smoother'
#define BCOEFFICIENT 3950 // The beta coefficient of the thermistor (usually 3000-4000)
#define SERIESRESISTOR 10000 // the value of the 'other' resistor 
#define POOL_READ_INTERVAL 900000 //measure the temperature every POOL_READ_INTERVAL msec

unsigned long pool_interval = 0;
int samples[NUMSAMPLES];
int pool_THERMISTOR = A0;
char pool_temperature_str[64]; //String to store the sensor data

bool useFahrenheit = true; //by default, we'll display the temperature in degrees celsius, but if you prefer farenheit please set this to true
int rssi = 0; //For wifi signal strength
char ps_voltage[64]; //String to store voltage
char ps_soc[64]; //String to store state of charge

// MQTT server
void callback(char* topic, byte* payload, unsigned int length);

/**
 * if want to use IP address,
 * byte server[] = { 192,168,0,216 };
 * MQTT client(server, 1883, callback);
 **/

byte server[] = {192,168,0,216};
MQTT client(server, 1883, callback);

void setup() {

    Particle.publish("device starting", "Version: " + String(_version), 60, PRIVATE);

    pool_interval = 0;
    pinMode(pool_THERMISTOR, INPUT);
    Particle.variable("pool_temp", pool_temperature_str);
    Particle.variable("RSSI", &rssi);
    Particle.variable("PS-VOLTAGE", ps_voltage);
    Particle.variable("PS-SOC", ps_soc);
    //Include the setup for power shield
    // This essentially starts the I2C bus
    batteryMonitor.begin(); // This sets up the fuel gauge
    batteryMonitor.quickStart();
        // connect to the server

    client.connect("sparkclient");

    // publish/subscribe
    if (client.isConnected()) {
        client.publish("pool-thermometer/message","hello pool world");
        client.publish("pool-thermometer/pool_temp", pool_temperature_str);
    }

    delay(1000); // Wait for it to settle down - delay 1.0 second
}

void loop() {
    if (client.isConnected())
        client.loop();

    pool_temp(); //Measure the pool temperature

    rssi = WiFi.RSSI();  // Read wifi signal strength
    Particle.publish("rssi", String(rssi), 60, PRIVATE); //Publish wifi signal to the cloud
    
    float cellVoltage = batteryMonitor.getVCell(); // Read the volatge of the LiPo Battery
    Particle.publish("ps-voltage", String(cellVoltage), 60, PRIVATE); // Publish Cell Voltage to cloud
    
    float stateOfCharge = batteryMonitor.getSoC(); // Read the State of Charge of the LiPo
    Particle.publish("ps-soc", String(stateOfCharge), 60, PRIVATE); // Publish State of Charge to Cloud
    delay(6000);  // wait for 6 seconds before sleeping
    delay(60000);  // wait for 60 seconds before sleeping
    System.sleep(SLEEP_MODE_DEEP, 900);
}

/*******************************************************************************
 * Function Name  : pool_temp
 * Description    : read the value of the thermistor, convert it to degrees and store it in pool_temperature_str
 * Return         : 0
 *******************************************************************************/
int pool_temp()
{
    uint8_t i;
    float average;

    // take N samples in a row, with a slight delay
    for (i=0; i< NUMSAMPLES; i++) {
        samples[i] = analogRead(pool_THERMISTOR);
        delay(10);
    }

    // average all the samples out
    average = 0;
    for (i=0; i< NUMSAMPLES; i++) {
        average += samples[i];
    }
    average /= NUMSAMPLES;

    // convert the value to resistance
    average = (4095 / average)  - 1;
    average = SERIESRESISTOR / average;


    float steinhart;
    steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
    steinhart = log(steinhart);                  // ln(R/Ro)
    steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
    steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
    steinhart = 1.0 / steinhart;                 // Invert
    steinhart -= 273.15;                         // convert to C
    
  // Convert Celsius to Fahrenheit - EXPERIMENTAL, so let me know if it works please - Gustavo.
  // source: http://playground.arduino.cc/ComponentLib/Thermistor2#TheSimpleCode
  if (useFahrenheit) {
    steinhart = (steinhart * 9.0)/ 5.0 + 32.0;
  }

    char ascii[32];
    int steinhart1 = (steinhart - (int)steinhart) * 100;

    // for negative temperatures
    steinhart1 = abs(steinhart1);

    sprintf(ascii,"%0d.%d", (int)steinhart, steinhart1);
    Particle.publish("pool_temp", ascii, 60, PRIVATE);
//    Particle.publish("pool_temp", ascii, 60, PRIVATE, WITH_ACK);

//    char tempInChar[32];
//    sprintf(tempInChar,"%0d.%d", (int)steinhart, steinhart1);

    //Write temperature to string, google sheets will get this variable
//    sprintf(pool_temperature_str, "{\"t\":%s}", tempInChar);

    return 0;
}
